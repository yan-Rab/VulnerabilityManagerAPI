# Django
from django.db.models import Avg
# Third party
from rest_framework import response, status
from rest_framework.test import APIClient, APITestCase

# Local
from api.models import AffectedHost, Host, Vulnerability
from api.serializers import (
    AffectedHostSerializerList,
    HostSerializer, 
    VulnerabilityDetailSerializer, 
    VulnerabilitySerializer
)


class HostTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.host_post_valid = {
            "name": "ServerTeste",
            "ip_address": "192.168.11.1",
            "risk": 8.5,
        }

        self.host_post_invalid = {
            "name": "",
            "ip_address": "185.567.1.33",
            "risk": "zero"
        }

        self.host = Host.objects.create(
            name = "host1",
            ip_address = "192.168.1.10",
            risk = 2.5
        )

        self.vulnerability = Vulnerability.objects.create(
            name = "Vulnerability1",
            severity = "Media",
            cvss = 9.2
        )

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )

    def test_create_valid_host(self):
        response = self.client.post('/hosts/', self.host_post_valid)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

    def test_create_invalid_host(self):
        response = self.client.post('/hosts/', self.host_post_invalid)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_list_all_hosts(self):
        response = self.client.get('/hosts/')
        hosts = Host.objects.all() 
        serializer = HostSerializer(hosts, many=True)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['results'], serializer.data)

    def test_host_detail(self):
        response = self.client.get(f'/hosts/{self.host.pk}/host_detail/')


        host = Host.objects.get(id=self.host.pk)
        serializer_host = HostSerializer(host)

        vulnerabilities_corrected = AffectedHost.objects.all().filter(
            host__id = self.host.pk,
            corrected=True
        )

        serializer_vulnerabilities_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_corrected, 
            many = True
        )

        vulnerabilities_not_corrected = AffectedHost.objects.all().filter(
            host__id = self.host.pk,
            corrected=False
        )

        serializer_vulnerabilities_not_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_not_corrected, 
            many = True
        )

        host_detail = {
            "host": serializer_host.data,
            "vulnerabilities_corrected": serializer_vulnerabilities_corrected.data,
            "vulnerabilities_not_corrected": serializer_vulnerabilities_not_corrected.data
        }

        self.assertEqual(response.data, host_detail, msg="Test of host detail are failed")
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class VulnerabilityTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.vulnerability_post_valid = {
            "name": "Vulnerability22",
            "severity": "Alta",
            "cvss": 8.7
        }

        self.vulnerability_post_invalid = {
            "name": "Vulnerability12",
            "severity": 1,
            "cvss": ""
        }

        self.vulnerability = Vulnerability.objects.create(
            name = "vulnerability1",
            severity = "Media",
            cvss = 4.5
        )

        self.host = Host.objects.create(
            name = "host2",
            ip_address = "192.168.1.10",
            risk = 3.5
        )

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )

    def test_list_all_vulnerabilities(self):
        response = self.client.get("/vulnerabilities/")
        vulnerabilities = Vulnerability.objects.all()
        serializer = VulnerabilitySerializer(vulnerabilities, many=True)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['results'], serializer.data)

    def test_create_valid_vulnerability(self):
        response = self.client.post("/vulnerabilities/", self.vulnerability_post_valid)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
    
    def test_create_invalid_vulnerability(self):
        response = self.client.post("/vulnerabilities/", self.vulnerability_post_invalid)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
    
    def test_show_vulnerabilities_filtering_by_severity_and_host(self):
        response = self.client.get(f"/vulnerabilities/{self.host.pk}/detail/", {"severity": "Media"})
        vulnerabilities = AffectedHost.objects.all().filter(
            vulnerability__severity = 'Media', 
            host__id = self.host.pk, 
            corrected = False
        )

        serializer = VulnerabilityDetailSerializer(vulnerabilities, many=True)
     
        self.assertEqual(response.data, serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class AffectedHostTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.host = Host.objects.create(
            name = "host1",
            ip_address = "191.168.1.10",
            risk = 3.5
        )

        self.host2 = Host.objects.create(
            name = "host2",
            ip_address = "192.168.1.10",
            risk = 6.5
        )

        self.vulnerability = Vulnerability.objects.create(
            name = "Vulnerability3",
            severity = "Media",
            cvss = 7.2
        )

        self.affected_host_post_valid = {
            "host": self.host2.pk,
            "vulnerability": self.vulnerability.pk,
            "corrected": False
        }

        self.affected_host_post_invalid = {
            "host_id": "",
            "vulnerability_id": self.vulnerability.pk,
            "corrected": False
        }

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )

    def test_list_all_affected_hosts(self):
        response = self.client.get("/affectedHosts/")
        affected_hosts = AffectedHost.objects.all()
        serializer = AffectedHostSerializerList(affected_hosts, many=True)
        self.assertEqual(response.data['results'], serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_create_affected_host_valid(self):
        response = self.client.post("/affectedHosts/", self.affected_host_post_valid)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

    def test_create_affected_hosts_invalid(self):
        response = self.client.post("/affectedHosts/", self.affected_host_post_invalid)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    
    def test_show_affected_hosts_by_vulnerability(self):
        response = self.client.get(
            f'/affectedHosts/{self.vulnerability.pk}/vulnerability_id/'
        )

        affectedHosts_by_vulnerability = (
            AffectedHost.objects.all().filter(
                vulnerability_id= self.vulnerability.pk, 
                corrected=False
            )
        )

        serializer = AffectedHostSerializerList(
            affectedHosts_by_vulnerability,
            many = True
        )

        def get_affected_hosts_data(affected_host):
            return affected_host['host']

        hosts = map(get_affected_hosts_data, serializer.data)
        list_hosts = list(hosts)

        self.assertListEqual(response.data, list_hosts)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
    
    def set_field_corrected(self):
        response = self.client.put(f'/affectedHosts/{self.affected_host.pk}/', {
            "corrected": True
        })

        affected_host = AffectedHost.objects.get(pk = self.affected_host.pk)

        self.assertEqual(affected_host.corrected, True)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)


class CardTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.vulnerability = Vulnerability.objects.create(
            name = "vulnerability1",
            severity = "Media",
            cvss = 4.5
        )

        self.host = Host.objects.create(
            name = "host2",
            ip_address = "192.168.1.10",
            risk = 3.5
        )

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )


    def test_show_vulnerabilities_not_corrected_by_severity(self):
        response = self.client.get("/cards/vulnerabilities_not_corrected/", 
            {"severity": "Media"}
        )

        vulnerabilities = (
            AffectedHost.objects.all().filter(
                corrected = False, 
                vulnerability__severity = "Media"
            )
        )
    
        serializer = VulnerabilityDetailSerializer(vulnerabilities, many=True)

        self.assertEqual(response.data, serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_show_top10_vulnerable_hosts(self):
        response = self.client.get("/cards/top10_vulnerable_hosts/")

        hosts = Host.objects.all().order_by('-risk')[:10]
        serializer = HostSerializer(hosts, many = True)

        self.assertEqual(response.data, serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_show_vulnerability_card(self):
        response = self.client.get("/cards/vulnerability/")

        vulnerability_card = {
            "total_vulnerabilities": Vulnerability.objects.all().only("id").count(),
            "vulnerabilities_not_corrected": (
                AffectedHost.objects.all().filter(corrected = False).only("id").count()
            )
        }

        self.assertEqual(response.data, vulnerability_card)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_show_host_card(self):
        response = self.client.get("/cards/host/")

        host_card = {
            "total_hosts": Host.objects.all().only("id").count(),
            "vulnerable_hosts_amount": AffectedHost.objects.all().only("id").count()
        }

        self.assertEqual(response.data, host_card)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_show_average_risk_hosts(self):
        response = self.client.get("cards/average_risk_host/")
        average_risk_host = Host.objects.all().aggregate(Avg('risk'))

        self.assertEqual(response.data, average_risk_host)
        self.assertEqual(response.status_code, status.HTTP_200_OK)


# Create your tests here.
