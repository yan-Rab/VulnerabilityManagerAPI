# Django
from django.urls import reverse

# Third party
from rest_framework import status
from rest_framework.test import APIClient, APITestCase

# Local
from api.models import AffectedHost, Host, Vulnerability
from api.serializers import (
    HostSerializer, 
    VulnerabilityDetailSerializer, 
    VulnerabilitySerializer
)


class HostTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.host_post_valid = {
            "name": "ServerTeste",
            "ip_address": "192.168.11.1",
            "risk": 8.5,
        }

        self.host_post_invalid = {
            "name": "",
            "ip_address": "185.567.1.33",
            "risk": "zero"
        }

        self.host = Host.objects.create(
            name = "host1",
            ip_address = "192.168.1.10",
            risk = 2.5
        )

        self.vulnerability = Vulnerability.objects.create(
            name = "Vulnerability1",
            severity = "Media",
            cvss = 9.2
        )

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )

    def test_create_valid_host(self):
        response = self.client.post('/hosts/', self.host_post_valid)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

    def test_create_invalid_host(self):
        response = self.client.post('/hosts/', self.host_post_invalid)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)

    def test_list_all_hosts(self):
        response = self.client.get('/hosts/')

        hosts = Host.objects.all() 
        serializer = HostSerializer(hosts, many=True)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['results'], serializer.data)

    def test_host_detail(self):
        response = self.client.get(f'/hosts/{self.host.pk}/host_detail/')

        host = Host.objects.get(id=self.host.pk)
        serializer_host = HostSerializer(host)

        vulnerabilities_corrected = AffectedHost.objects.all().filter(
            host__id = self.host.pk,
            corrected=True
        )

        serializer_vulnerabilities_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_corrected, 
            many = True
        )

        vulnerabilities_not_corrected = AffectedHost.objects.all().filter(
            host__id = self.host.pk,
            corrected=False
        )

        serializer_vulnerabilities_not_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_not_corrected, 
            many = True
        )

        host_detail = {
            "host": serializer_host.data,
            "vulnerabilities_corrected": serializer_vulnerabilities_corrected.data,
            "vulnerabilities_not_corrected": serializer_vulnerabilities_not_corrected.data
        }

        self.assertEqual(response.data, host_detail, msg="Test of host detail are failed")
        self.assertEqual(response.status_code, status.HTTP_200_OK)


class VulnerabilityTests(APITestCase):
    client = APIClient()

    def setUp(self):

        self.vulnerability_post_valid = {
            "name": "Vulnerability22",
            "severity": "Alta",
            "cvss": 8.7
        }

        self.vulnerability_post_invalid = {
            "name": "Vulnerability12",
            "severity": 1,
            "cvss": ""
        }

        self.vulnerability = Vulnerability.objects.create(
            name = "vulnerability1",
            severity = "Media",
            cvss = 4.5
        )

        self.host = Host.objects.create(
            name = "host2",
            ip_address = "192.168.1.10",
            risk = 3.5
        )

        self.affected_host = AffectedHost.objects.create(
            host_id = self.host.pk,
            vulnerability_id = self.vulnerability.pk,
            corrected = False
        )

    def test_list_all_vulnerabilities(self):
        response = self.client.get("/vulnerabilities/")
        vulnerabilities = Vulnerability.objects.all()
        serializer = VulnerabilitySerializer(vulnerabilities, many=True)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['results'], serializer.data)

    def test_create_valid_vulnerability(self):
        response = self.client.post("/vulnerabilities/", self.vulnerability_post_valid)
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
    
    def test_create_invalid_vulnerability(self):
        response = self.client.post("/vulnerabilities/", self.vulnerability_post_invalid)
        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
    
    def test_show_vulnerabilities_filtering_by_severity_and_host(self):
        response = self.client.get(f"/vulnerabilities/{self.host.pk}/detail/", {"severity": "Media"})
        vulnerabilities = AffectedHost.objects.all().filter(
            vulnerability__severity = 'Media', 
            host__id = self.host.pk, 
            corrected = False
        )

        serializer = VulnerabilityDetailSerializer(vulnerabilities, many=True)
     
        self.assertEqual(response.data, serializer.data)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

# Create your tests here.
