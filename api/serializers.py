# Django


# Third party

from rest_framework import serializers
from rest_framework.validators import UniqueTogetherValidator


# Local
from .models import AffectedHost, Host,Vulnerability

class VulnerabilitySerializer(serializers.ModelSerializer):
    affected_hosts_amount = serializers.SerializerMethodField()
    
    class Meta:
        model = Vulnerability
        fields = "__all__"
        
    def get_affected_hosts_amount(self, obj):
        affected_hosts_amount = AffectedHost.objects.all().filter(
            vulnerability_id = obj.pk
        ).count()

        return affected_hosts_amount


class VulnerabilityDetailSerializer(serializers.ModelSerializer):
    vulnerability = VulnerabilitySerializer()

    class Meta:
        model = AffectedHost
        fields = [
            'vulnerability',
            'corrected',
        ]


class HostSerializer(serializers.ModelSerializer):
    vulnerabilities_amount = serializers.SerializerMethodField()
    
    class Meta:
        model = Host
        fields = "__all__"
        read_only_fields = ['vulnerabilities_amount']
        
    def get_vulnerabilities_amount(self, obj):
        vulnerabilities_amount = AffectedHost.objects.all().filter(
            host_id = obj.pk
        ).count()

        return vulnerabilities_amount


class AffectedHostSerializerList(serializers.ModelSerializer):
    host = HostSerializer()
    vulnerability = VulnerabilitySerializer()

    class Meta:
        model = AffectedHost
        fields = [
            'created',
            'id',
            'host',
            'vulnerability',
            'corrected'
        ]
        validators = [
            UniqueTogetherValidator(
                queryset= AffectedHost.objects.all(),
                fields= ['host', 'vulnerability', 'corrected']
            )
        ]


class AffectedHostSerializerCreate(serializers.ModelSerializer):

    class Meta:
        model = AffectedHost
        fields = [
            'created',
            'id',
            'host',
            'vulnerability',
            'corrected'
        ]


class AffectedHostSerializerUpdate(serializers.ModelSerializer):
    class Meta:
        model = AffectedHost
        fields = [
            'corrected'
        ]
    