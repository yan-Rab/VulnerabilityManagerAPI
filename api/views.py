# Django
from django.db import models
from django.http import Http404
from django.db.models import Avg
from rest_framework.decorators import action
from rest_framework.views import APIView
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status

# Third party

#Local
from .models import AffectedHosts, Hosts, Vulnerability

from .serializers import (
AffectedHostsSerializerRelation,
AffectedHostsSerializerEntity,
HostSerializer,
CardHostSerializer,
VulnerabilitySerializer,
CardVulnerabilitySerializer,
)


class HostsViewset(viewsets.ModelViewSet):
    queryset = Hosts.objects.all()
    serializer_class = HostSerializer



class VulnerabilitiesViewset(viewsets.ModelViewSet):
    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer



class AffectedHostsViewset(viewsets.ModelViewSet):
    queryset = AffectedHosts.objects.all()
    serializer_class = AffectedHostsSerializerRelation

    def get_serializer_class(self):
        actions = [
            'create'
        ]

        if self.action in actions:
            return AffectedHostsSerializerEntity

        return self.serializer_class


    @action(detail=True, url_path= 'vulnerability', url_name='vulnerability')
    def show_affected_hosts_by_vulnerability(self, request, pk):

        affectedHosts_by_vulnerability = (
            AffectedHosts
            .objects.all()
            .filter(vulnerability_id=pk, corrected=False)
        )

        serializer = AffectedHostsSerializerRelation(
            affectedHosts_by_vulnerability,
            many = True
        )

        return Response(serializer.data)


class CardHost(object):
    def __init__(self,total_hosts, vulnerable_hosts_amount):
        self.total_hosts = total_hosts
        self.vulnerable_hosts_amount = vulnerable_hosts_amount

class CardVulnerability(object):
    def __init__(self, total_vulnerabilities, vulnerabilities_not_corrected):
        self.total_vulnerabilities = total_vulnerabilities
        self.vulnerabilities_not_corrected = vulnerabilities_not_corrected



class CardsViewset(viewsets.ViewSet):

    @action(detail= False, url_name='host', url_path= 'host')
    def show_host_card(self, request):

        card_host = CardHost(
            total_hosts= Hosts.objects.all().count(),
            vulnerable_hosts_amount= AffectedHosts.objects.all().count()
        )

        serializer = CardHostSerializer(card_host)
        return Response(serializer.data)


    @action(detail=False, url_name = 'vulnerability', url_path='vulnerability')
    def show_vulnerability_card(self, request):

        card_vulnerability = CardVulnerability(

            total_vulnerabilities= Vulnerability.objects.all().count(),
            vulnerabilities_not_corrected= (
                AffectedHosts.objects.all().filter(corrected = False).count()
            )
        )

        serializer = CardVulnerabilitySerializer(card_vulnerability)
        return Response(serializer.data)


    @action(detail= False, url_name='average-risk-host', url_path='average_risk_host')
    def show_average_risk_hosts(self, request):
        average_risk_host = Hosts.objects.all().aggregate(Avg('risk'))
        return Response(average_risk_host)



# Create your views here.
