# Django
from django.http import Http404
from django.db.models import Avg
from django.shortcuts import get_object_or_404
from rest_framework.decorators import action

from rest_framework import serializers, viewsets
from rest_framework.response import Response
from rest_framework import status

# Third party

#Local
from .models import AffectedHost, Host, Vulnerability

from .serializers import (
VulnerabilitySerializer,
VulnerabilityDetailSerializer,
HostSerializer,
AffectedHostSerializerList,
AffectedHostSerializerCreate,
AffectedHostSerializerUpdate
)


class HostsViewset(viewsets.ModelViewSet):
    queryset = Host.objects.all()
    serializer_class = HostSerializer

    @action(detail=True, url_name='host-detail', url_path='host_detail')
    def show_host_detail(self, request, pk):

        host = Host.objects.get(id=pk)
        serializer_host = HostSerializer(host)

        vulnerabilities_corrected = AffectedHost.objects.all().filter(
            host__id = pk,
            corrected=True
        )

        serializer_vulnerabilities_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_corrected, 
            many = True
        )

        vulnerabilities_not_corrected = AffectedHost.objects.all().filter(
            host__id = pk,
            corrected=False
        )

        serializer_vulnerabilities_not_corrected = VulnerabilityDetailSerializer(
            vulnerabilities_not_corrected, 
            many = True
        )

        host_detail = {
            "host": serializer_host.data,
            "vulnerabilities_corrected": serializer_vulnerabilities_corrected.data,
            "vulnerabilities_not_corrected": serializer_vulnerabilities_not_corrected.data
        }

        return Response(host_detail)



class VulnerabilitiesViewset(viewsets.ModelViewSet):
    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    @action(detail= True, url_name= 'detail', url_path='detail')
    def show_vulnerabilities_not_corrected_filter_by_severity_and_host(self, request, pk):
        severity = request.GET.get('severity', '')
        vulnerabilities = AffectedHost.objects.all().filter(
            vulnerability__severity = severity, 
            host__id = pk, 
            corrected = False
        )
        serializer = VulnerabilityDetailSerializer(vulnerabilities, many=True)
        return Response(serializer.data)


class AffectedHostsViewset(viewsets.ModelViewSet):
    queryset = AffectedHost.objects.all()
    serializer_class = AffectedHostSerializerList

    def get_serializer_class(self):

        if self.action == 'create':
            return AffectedHostSerializerCreate
        if self.action == 'update':
            return AffectedHostSerializerUpdate

        return self.serializer_class

    def create(self, request, *args, **kwargs):
        serializer = self.get_serializer_class()(data=request.data)

        if serializer.is_valid():

            host_id = request.data['host']
            host = Host.objects.get(id = host_id)
            host.vulnerabilities_amount = host.vulnerabilities_amount + 1
            host.save()

            vulnerability_id = request.data['vulnerability']
            vulnerability = Vulnerability.objects.get(id = vulnerability_id)
            vulnerability.affected_hosts_amount = vulnerability.affected_hosts_amount + 1
            vulnerability.save()

            affected_host = self.queryset.filter(
                host_id = host_id, 
                vulnerability_id = vulnerability_id
            ).only('id').count()

            if affected_host == 0:
                serializer.save()
                return Response(serializer.data)
            
        
            return Response(
                {"message": "this host is already affected by this vulnerability"}, 
                status = status.HTTP_400_BAD_REQUEST
            )
            

    @action(detail=True, url_name='vulnerability-id', url_path= 'vulnerability_id')
    def show_affected_hosts_by_vulnerability(self, request, pk):

        affectedHosts_by_vulnerability = (
            self.queryset.filter(vulnerability_id=pk, corrected=False)
        )

        serializer = self.serializer_class(
            affectedHosts_by_vulnerability,
            many = True
        )

        def get_hosts_data(element):
            return element['host']

        hosts = map(get_hosts_data, serializer.data)

        return Response(hosts)



class CardsViewset(viewsets.ViewSet):

    @action(detail= False, url_name='host', url_path= 'host')
    def show_host_card(self, request):

        host_card = {
            "total_hosts": Host.objects.all().only("id").count(),
            "vulnerable_hosts_amount": AffectedHost.objects.all().only("id").count()
        }

        return Response(host_card)


    @action(
        detail=False, 
        url_name = 'vulnerability', 
        url_path='vulnerability'
    )
    def show_vulnerability_card(self, request):

        vulnerability_card = {
            "total_vulnerabilities": Vulnerability.objects.all().only("id").count(),
            "vulnerabilities_not_corrected": (
                AffectedHost.objects.all().filter(corrected = False).only("id").count()
            )
        }

        return Response(vulnerability_card)


    @action(
        detail= False, 
        url_name='average-risk-host', 
        url_path='average_risk_host'
    )
    def show_average_risk_hosts(self, request):
        average_risk_host = Host.objects.all().aggregate(Avg('risk'))
        return Response(average_risk_host)


    @action(
        detail=False, 
        url_name='vulnerabilities-not-corrected', 
        url_path= 'vulnerabilities_not_corrected'
    )
    def show_vulnerabilities_not_corrected_by_severity(self, request):
        severity = request.GET.get('severity', '')
    
        vulnerabilities = (
            AffectedHost.objects.all().filter(corrected = False, vulnerability__severity = severity)
        )
    
        serializer = VulnerabilityDetailSerializer(vulnerabilities, many=True)
        return Response(serializer.data)


    @action(
        detail= False, 
        url_name='top10-vulnerable-hosts', 
        url_path='top10_vulnerable_hosts'
    )
    def show_top10_vulnerable_hosts(self, request):
        data = Host.objects.all().order_by('-risk')[:10]
        serializer = HostSerializer(data, many = True)
        return Response(serializer.data)


# Create your views here.
