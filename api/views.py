# Django
from django.http import Http404
from rest_framework.views import APIView
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status

# Third party

#Local
from .models import AffectedHosts, Hosts, Vulnerability

from .serializers import (
AffectedHostsSerializerRelation,
AffectedHostsSerializerEntity,
HostSerializer,
VulnerabilitySerializer
)


class HostList(APIView):

    def get(self, request, format=None):
        hosts = Hosts.objects.all()
        serializer = HostSerializer(hosts, many=True)
        return Response(serializer.data)

    def post(self, request, format=None):
        serializer = HostSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status = status.HTTP_201_CREATED)

        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)


class VulnerabilityList(APIView):

    def get(self, request, format=None):
        vulnerabilities = Vulnerability.objects.all()
        serializer = VulnerabilitySerializer(vulnerabilities, many = True)
        return Response(serializer.data, status= status.HTTP_200_OK)

    def post(self, request, format=None):
        serializer = VulnerabilitySerializer(data=request.data)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status= status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class AffectedHostsList(APIView):

    def get(self, request, format=None):
        affected_hosts = AffectedHosts.objects.all()
        serializer = AffectedHostsSerializerRelation(affected_hosts, many = True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request, format=None):
        serializer = AffectedHostsSerializerEntity(data=request.data)

        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status= status.HTTP_201_CREATED)

        return Response(serializer.errors, status = status.HTTP_400_BAD_REQUEST)



class AffectedHostsDetail(APIView):

    def get_host_affected(self, pk):
        try:

            return AffectedHosts.objects.all().filter(vulnerability_id=pk, corrected=False)
        except AffectedHosts.DoesNotExist:
            raise Http404

    def get(self, request, pk, format=None):
        affected_host = self.get_host_affected(pk)

        serializer = AffectedHostsSerializerRelation(affected_host, many=True)
        return Response(serializer.data)
# Create your views here.
